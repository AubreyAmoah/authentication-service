version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: auth-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: auth_service_db
      POSTGRES_USER: auth_user
      POSTGRES_PASSWORD: auth_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - auth-network

  # Redis (for session storage - optional)
  redis:
    image: redis:7-alpine
    container_name: auth-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - auth-network

  # Authentication Service
  auth-service:
    build: .
    container_name: auth-service
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: postgresql://auth_user:auth_password@postgres:5432/auth_service_db
      JWT_SECRET: dev-jwt-secret-change-in-production
      JWT_REFRESH_SECRET: dev-refresh-secret-change-in-production
      CORS_ORIGIN: http://localhost:3001
      FRONTEND_URL: http://localhost:3001
    ports:
      - "3000:3000"
    depends_on:
      - postgres
      - redis
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - auth-network
    command: npm run dev

  # Adminer (Database Management UI)
  adminer:
    image: adminer:4
    container_name: auth-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - auth-network

volumes:
  postgres_data:
  redis_data:

networks:
  auth-network:
    driver: bridge