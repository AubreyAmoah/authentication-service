// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id        String   @id @default(uuid())
  name      String   @unique
  slug      String   @unique
  email     String?
  phone     String?
  address   String?
  website   String?
  logoUrl   String?
  isActive  Boolean  @default(true)
  settings  Json?    @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users       User[]
  roles       Role[]
  invitations Invitation[]
  sessions    Session[]
  // Audit log relationship
  auditLogs   AuditLog[]

  @@map("organizations")
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  password          String?
  firstName         String
  lastName          String
  phone             String?
  avatar            String?
  isEmailVerified   Boolean   @default(false)
  isActive          Boolean   @default(true)
  isSuperAdmin      Boolean   @default(false)
  lastLoginAt       DateTime?
  emailVerifiedAt   DateTime?
  passwordChangedAt DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Organization relation
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Relations
  roles              UserRole[]
  sessions           Session[]
  passwordResets     PasswordReset[]
  emailVerifications EmailVerification[]
  oauthAccounts      OAuthAccount[]
  invitations        Invitation[]
  mfaSecrets         MFASecret[]
  mfaBackupCodes     MFABackupCode[]
  auditLogs          AuditLog[]
  loginAttemps       LoginAttempts[]

  // Additional audit-related fields
  lastLoginIp String?
  lockedAt    DateTime?

  @@map("users")
}

model Role {
  id          String   @id @default(uuid())
  name        String
  slug        String
  description String?
  permissions Json     @default("[]")
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Organization relation
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Relations
  users UserRole[]

  @@unique([slug, organizationId])
  @@map("roles")
}

model UserRole {
  id     String @id @default(uuid())
  userId String
  roleId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, roleId])
  @@map("user_roles")
}

model Session {
  id             String    @id @default(uuid())
  token          String    @unique
  userId         String
  userAgent      String?
  ipAddress      String?
  isActive       Boolean   @default(true)
  mfaVerifiedAt  DateTime? // Add this field for MFA support
  expiresAt      DateTime
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  organizationId String?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model PasswordReset {
  id        String    @id @default(uuid())
  email     String
  token     String    @unique
  userId    String
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

model EmailVerification {
  id         String    @id @default(uuid())
  email      String
  token      String    @unique
  userId     String
  expiresAt  DateTime
  verifiedAt DateTime?
  createdAt  DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verifications")
}

model OAuthAccount {
  id           String   @id @default(uuid())
  provider     String
  providerId   String
  email        String?
  accessToken  String?
  refreshToken String?
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@map("oauth_accounts")
}

model Invitation {
  id             String    @id @default(uuid())
  email          String
  token          String    @unique
  role           String?
  invitedById    String
  organizationId String
  acceptedAt     DateTime?
  expiresAt      DateTime
  createdAt      DateTime  @default(now())

  invitedBy    User         @relation(fields: [invitedById], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([email, organizationId])
  @@map("invitations")
}

model ApiKey {
  id             String    @id @default(uuid())
  name           String
  key            String    @unique
  permissions    Json      @default("[]")
  isActive       Boolean   @default(true)
  expiresAt      DateTime?
  lastUsedAt     DateTime?
  organizationId String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@map("api_keys")
}

model MFASecret {
  id         String    @id @default(uuid())
  userId     String
  type       String // 'TOTP', 'SMS', 'EMAIL'
  secret     String
  isActive   Boolean   @default(false)
  lastUsedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("mfa_secrets")
}

model MFABackupCode {
  id        String    @id @default(uuid())
  userId    String
  codeHash  String
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("mfa_backup_codes")
}

// Audit Log Model
model AuditLog {
  id String @id @default(cuid())

  // Core audit fields
  action     String // Action performed (LOGIN, LOGOUT, CREATE_USER, etc.)
  resource   String? // Resource affected (USER, ORGANIZATION, ROLE, etc.)
  resourceId String? // ID of the affected resource

  // User information
  userId String? // User who performed the action
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  // Session and request information
  sessionId String? // Session identifier
  ipAddress String? // IP address of the request
  userAgent String? // User agent string

  // Location and device information
  country    String? // Country from IP geolocation
  city       String? // City from IP geolocation
  deviceType String? // Device type (desktop, mobile, tablet)
  browser    String? // Browser information

  // Audit metadata
  timestamp    DateTime @default(now())
  success      Boolean  @default(true)
  errorMessage String? // Error message if action failed

  // Additional context and details
  details   Json? // Flexible JSON field for additional context
  oldValues Json? // Previous values (for update operations)
  newValues Json? // New values (for create/update operations)

  // Organization context
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)

  // Risk and security fields
  riskLevel   RiskLevel @default(LOW)
  flagged     Boolean   @default(false)
  reviewedBy  String? // Admin who reviewed flagged actions
  reviewedAt  DateTime?
  reviewNotes String?

  // Indexing for performance
  @@index([userId])
  @@index([action])
  @@index([timestamp])
  @@index([organizationId])
  @@index([success])
  @@index([riskLevel])
  @@index([flagged])
  @@index([ipAddress])
  @@index([resourceId])
  @@map("audit_logs")
}

// Enum for risk levels
enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model AuditConfiguration {
  id String @id @default(cuid())

  // Retention settings
  retentionDays Int @default(365) // How long to keep audit logs

  // What to log
  logLogins              Boolean @default(true)
  logLogouts             Boolean @default(true)
  logUserCreation        Boolean @default(true)
  logUserUpdates         Boolean @default(true)
  logUserDeletion        Boolean @default(true)
  logRoleChanges         Boolean @default(true)
  logPermissionChanges   Boolean @default(true)
  logPasswordChanges     Boolean @default(true)
  logSuperAdminActions   Boolean @default(true)
  logOrganizationChanges Boolean @default(true)
  logFailedAttempts      Boolean @default(true)

  // Security settings
  autoFlagSuspicious Boolean @default(true)
  maxLoginAttempts   Int     @default(5)
  lockoutDuration    Int     @default(30) // minutes

  // Notification settings
  notifyOnHighRisk     Boolean  @default(true)
  notifyOnCriticalRisk Boolean  @default(true)
  notificationEmails   String[] // Array of emails to notify

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("audit_configuration")
}

// Audit Event Templates for common actions
model AuditEventTemplate {
  id          String    @id @default(cuid())
  action      String    @unique
  description String
  riskLevel   RiskLevel @default(LOW)
  category    String // AUTHENTICATION, USER_MANAGEMENT, SYSTEM, etc.

  // Template for details JSON structure
  detailsSchema Json?

  // Flags
  requiresReview Boolean @default(false)
  autoFlag       Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("audit_event_templates")
}

model LoginAttempts {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  ipAddress  String?
  userAgent  String?
  country    String?
  city       String?
  deviceType String?
  browser    String?

  @@map("login_attempts")
}
