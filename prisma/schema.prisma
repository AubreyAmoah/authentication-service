// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id        String   @id @default(uuid())
  name      String   @unique
  slug      String   @unique
  email     String?
  phone     String?
  address   String?
  website   String?
  logoUrl   String?
  isActive  Boolean  @default(true)
  settings  Json?    @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users       User[]
  roles       Role[]
  invitations Invitation[]
  sessions    Session[]

  @@map("organizations")
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  password          String?
  firstName         String
  lastName          String
  phone             String?
  avatar            String?
  isEmailVerified   Boolean   @default(false)
  isActive          Boolean   @default(true)
  lastLoginAt       DateTime?
  emailVerifiedAt   DateTime?
  passwordChangedAt DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Organization relation
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Relations
  roles              UserRole[]
  sessions           Session[]
  passwordResets     PasswordReset[]
  emailVerifications EmailVerification[]
  oauthAccounts      OAuthAccount[]
  invitations        Invitation[]
  mfaSecrets         MFASecret[]
  mfaBackupCodes     MFABackupCode[]

  @@map("users")
}

model Role {
  id          String   @id @default(uuid())
  name        String
  slug        String
  description String?
  permissions Json     @default("[]")
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Organization relation
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Relations
  users UserRole[]

  @@unique([slug, organizationId])
  @@map("roles")
}

model UserRole {
  id     String @id @default(uuid())
  userId String
  roleId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, roleId])
  @@map("user_roles")
}

model Session {
  id            String    @id @default(uuid())
  token         String    @unique
  userId        String
  userAgent     String?
  ipAddress     String?
  isActive      Boolean   @default(true)
  mfaVerifiedAt DateTime? // Add this field for MFA support
  expiresAt     DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model PasswordReset {
  id        String    @id @default(uuid())
  email     String
  token     String    @unique
  userId    String
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

model EmailVerification {
  id         String    @id @default(uuid())
  email      String
  token      String    @unique
  userId     String
  expiresAt  DateTime
  verifiedAt DateTime?
  createdAt  DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verifications")
}

model OAuthAccount {
  id           String   @id @default(uuid())
  provider     String
  providerId   String
  email        String?
  accessToken  String?
  refreshToken String?
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@map("oauth_accounts")
}

model Invitation {
  id             String    @id @default(uuid())
  email          String
  token          String    @unique
  role           String?
  invitedById    String
  organizationId String
  acceptedAt     DateTime?
  expiresAt      DateTime
  createdAt      DateTime  @default(now())

  invitedBy    User         @relation(fields: [invitedById], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([email, organizationId])
  @@map("invitations")
}

model ApiKey {
  id             String    @id @default(uuid())
  name           String
  key            String    @unique
  permissions    Json      @default("[]")
  isActive       Boolean   @default(true)
  expiresAt      DateTime?
  lastUsedAt     DateTime?
  organizationId String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@map("api_keys")
}

model MFASecret {
  id         String    @id @default(uuid())
  userId     String
  type       String // 'TOTP', 'SMS', 'EMAIL'
  secret     String
  isActive   Boolean   @default(false)
  lastUsedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("mfa_secrets")
}

model MFABackupCode {
  id        String    @id @default(uuid())
  userId    String
  codeHash  String
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("mfa_backup_codes")
}
